"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[8559],{3905:(e,r,n)=>{n.d(r,{Zo:()=>m,kt:()=>d});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function p(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),u=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},m=function(e){var r=u(e.components);return t.createElement(i.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},s=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,g=s["".concat(i,".").concat(d)]||s[d]||c[d]||o;return n?t.createElement(g,l(l({ref:r},m),{},{components:n})):t.createElement(g,l({ref:r},m))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=s;var p={};for(var i in r)hasOwnProperty.call(r,i)&&(p[i]=r[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var u=2;u<o;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},6122:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var t=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3,toc_max_heading_level:4},l="\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d",p={unversionedId:"flutter/grammar/functional-programming",id:"flutter/grammar/functional-programming",title:"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d",description:"map",source:"@site/docs/flutter/grammar/functional-programming.md",sourceDirName:"flutter/grammar",slug:"/flutter/grammar/functional-programming",permalink:"/docs/flutter/grammar/functional-programming",draft:!1,editUrl:"https://github.com/rookedsysc/rookedsysc_saurus.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/flutter/grammar/functional-programming.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,toc_max_heading_level:4},sidebar:"flutter",previous:{title:"\uac1d\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d",permalink:"/docs/flutter/grammar/oop-programming"},next:{title:"\ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub798\ubc0d",permalink:"/docs/flutter/grammar/async-programming"}},i={},u=[{value:"map",id:"map",level:2},{value:"reduce",id:"reduce",level:2},{value:"fold",id:"fold",level:3},{value:"where",id:"where",level:2},{value:"Spread operator(...)",id:"spread-operator",level:2},{value:"Reference",id:"reference",level:3},{value:"functional programming \uc0ac\uc6a9 \uc608\uc2dc",id:"functional-programming-\uc0ac\uc6a9-\uc608\uc2dc",level:2}],m={toc:u};function c(e){let{components:r,...o}=e;return(0,a.kt)("wrapper",(0,t.Z)({},m,o,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\ud568\uc218\ud615-\ud504\ub85c\uadf8\ub798\ubc0d"},"\ud568\uc218\ud615 \ud504\ub85c\uadf8\ub798\ubc0d"),(0,a.kt)("h2",{id:"map"},"map"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},".map((x) => return);\n.map((x){\n    code\n};\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/rookedsysc/Flutter-Study/blob/main/Grammar/functionalProgramming/map.dart"},"map \ucc38\uc870")),(0,a.kt)("h2",{id:"reduce"},"reduce"),(0,a.kt)("p",null,"reduce \uc0ac\uc6a9\uc2dc parameter\uc758 data tyep\uacfc return result\uc758 data type\uc774 \uac19\uc544\uc57c \ud568.",(0,a.kt)("br",null),"\n\ubc30\uc5f4\uc758 \ub05d\uae4c\uc9c0 loop \ubc1c\uc0dd, \uccab \ubc88\uc9f8\ub294 prev + next \ud574\uc8fc\uace0 \uadf8 \uc774\ud6c4\ub85c\ub294 total + next \ud574\uc90c."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},".reduce((prev, next) => code);\n")),(0,a.kt)("h3",{id:"fold"},"fold"),(0,a.kt)("p",null,"reduce\uc640\ub294 \ub2e4\ub974\uac8c return tyep\uacfc parameter type\uc774 \uac19\uc9c0 \uc54a\uc544\ub3c4 \ub428.",(0,a.kt)("br",null),"\n\ub300\uc2e0, \uc120\uc5b8\ud574\uc904 \ub54c return type\uc744 \uc124\uc815\ud574\uc918\uc57c \ud558\uba70 (prev, next)\uc804\uc5d0 \uccab \ubc88\uc9f8 parameter\ub97c \ubc1b\uace0 \uc774\ub97c \uccab \ubc88\uc9f8 \uacc4\uc0b0\uac12\uc73c\ub85c \uc0ac\uc6a9\ud568.",(0,a.kt)("br",null)),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},".fold<returnType>(0, (prev, next) => prev + next);\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/rookedsysc/Flutter-Study/blob/main/Grammar/functionalProgramming/reduce.dart"},"reduce and fold \ucc38\uc870")),(0,a.kt)("h2",{id:"where"},"where"),(0,a.kt)("p",null,"where((x) => \uc870\uac74); \uc870\uac74\uc774 true\uc778 \uac12\ub9cc return \ud574\uc90c.",(0,a.kt)("br",null)),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"where((x) => \uc870\uac74); \n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/rookedsysc/Flutter-Study/blob/main/Grammar/functionalProgramming/where.dart"},"where \ucc38\uc870")),(0,a.kt)("h2",{id:"spread-operator"},"Spread operator(...)"),(0,a.kt)("p",null,"List \uc774\uc5b4\uc8fc\ub294 \uae30\ub2a5(?)",(0,a.kt)("br",null)," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ucd94\uac00(22.10.14) : Collection \ud615\ud0dc\uc5d0 Collection \uac12\uc744 \ub300\uc785\ud560 \ub54c \uc0ac\uc6a9. \ubaa9\ub85d\uc758 \ubaa8\ub4e0 \uac12\uc744 \ub2e4\ub978 \ubaa9\ub85d\uc5d0 \uc0bd\uc785\ud574\uc90c. ",(0,a.kt)("br",null))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="Spread Operator\ub97c \ud65c\uc6a9\ud55c ListTile \ucd9c\ub825"',title:'"Spread',"Operator\ub97c":!0,"\ud65c\uc6a9\ud55c":!0,ListTile:!0,'\ucd9c\ub825"':!0},"Drawer(\n  backgroundColor: darkColor,\n  child: ListView(\n    children: [\n      DrawerHeader(\n        child: Text(\n          '\uc9c0\uc5ed \uc120\ud0dd',\n          style: TextStyle(color: Colors.white, fontSize: 20.0),\n        ),\n      ),\n      // cas\n      ...regions\n          .map(\n            (e) => ListTile( // (1)\n              tileColor: Colors.white,\n              selectedTileColor: lightColor,\n              selectedColor: Colors.black,\n              selected: e == '\uc11c\uc6b8',\n              onTap: () {},\n              title: Text(e),\n            ),\n          )\n          .toList(),\n    ],\n  ),\n); \n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("img",{alt:"spreadListTile",src:n(117).Z,width:"616",height:"1276"}))),(0,a.kt)("h3",{id:"reference"},"Reference"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dart.dev/guides/language/language-tour#spread-operator"},"Spread oprator \uacf5\uc2dd \ubb38\uc11c"),(0,a.kt)("br",null),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/language/blob/master/accepted/2.3/spread-collections/feature-specification.md"},"Spread oprator github"),(0,a.kt)("br",null)),(0,a.kt)("h2",{id:"functional-programming-\uc0ac\uc6a9-\uc608\uc2dc"},"functional programming \uc0ac\uc6a9 \uc608\uc2dc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  String number = '12345';\n  final numberJPEG = number.split('').map((x) => '$x.jpeg').toList();\n  print(numberJPEG);\n  example2();\n  example3();\n}\n\n// Map > Map use map\nvoid example2() {\n  Map<String, String> harryPoter = {\n    \"Harry Potter\" : \"\ud574\ub9ac \ud3ec\ud130\",\n    \"Ron Weasley\" : \"\ub860 \uc704\uc990\ub9ac\",\n    \"Hermione Granger\" : \"\ud5e4\ub974\ubbf8\uc628\ub290 \uadf8\ub808\uc778\uc800\"\n  };\n\n  // map > map // Map Entry\ub294 class \uc784. MapEntry(key, value)\uc21c\uc73c\ub85c \ub418\uc5b4 \uc788\uc73c\uba70 key\uc640 value\uc5d0 \uac01\uac01 \uc811\uadfc\ud574\uc11c return \ud574\uc90c.\n  final result = harryPoter.map((key, value) => MapEntry(\n    'Harry Poter Character $key',\n    '\ud574\ub9ac\ud3ec\ud130 \uce90\ub9ad\ud130 $value',\n    ),\n  );\n  print(result);\n\n  final keys = harryPoter.keys.map((x) => 'HPC $x').toList;\n  print(keys);\n}\n\nvoid example3() {\n  Set blackPinkSet = {\n    '\ub85c\uc81c', '\uc9c0\uc218', '\uc81c\ub2c8', '\ub9ac\uc0ac',\n  };\n\n  final newSet = blackPinkSet.map((x) => '\ube14\ub799\ud551\ud06c $x');\n\n  print(newSet);\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="\ucd9c\ub825\uac12"',title:'"\ucd9c\ub825\uac12"'},"[1.jpeg, 2.jpeg, 3.jpeg, 4.jpeg, 5.jpeg]\n{Harry Poter Character Harry Potter: \ud574\ub9ac\ud3ec\ud130 \uce90\ub9ad\ud130 \ud574\ub9ac \ud3ec\ud130, Harry Poter Character Ron Weasley: \ud574\ub9ac\ud3ec\ud130 \uce90\ub9ad\ud130 \ub860 \uc704\uc990\ub9ac, Harry Poter Character Hermione Granger: \ud574\ub9ac\ud3ec\ud130 \uce90\ub9ad\ud130 \ud5e4\ub974\ubbf8\uc628\ub290 \uadf8\ub808\uc778\uc800}\n[HPC Harry Potter, HPC Ron Weasley, HPC Hermione Granger]\n(\ube14\ub799\ud551\ud06c \ub85c\uc81c, \ube14\ub799\ud551\ud06c \uc9c0\uc218, \ube14\ub799\ud551\ud06c \uc81c\ub2c8, \ube14\ub799\ud551\ud06c \ub9ac\uc0ac)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},'void main() {\n  List<Map<String, String>> people = [\n    {\n      "name" : "\ub85c\uc81c",\n      "group" : "\ube14\ub799\ud551\ud06c",\n    },\n    {\n      "name" : "\uc9c0\uc218",\n      "group" : "\ube14\ub799\ud551\ud06c",\n    },\n    {\n      "name" : "RM",\n      "group" : "BTS",\n    },\n    {\n      "name" : "\ubdd4",\n      "group" : "BTS",\n    },\n  ];\n\n  print(people);\n\n  final parsedPeople = people.map((x) => Person(\n    name: x[\'name\']!, // \uac12\uc774 \ubc18\ub4dc\uc2dc \uc874\uc7ac\ud55c\ub2e4\ub294 \ub73b. ! \uc548\ubd99\uc5ec\uc8fc\uba74 \ucc38\uc870 error \ubc1c\uc0dd\ud568.\n    group: x[\'group\']!,\n  )).toList();\n\n  print(parsedPeople);\n\n  for(Person person in parsedPeople) {\n    print(person.name);\n    print(person.group);\n  };\n\n  final bts = parsedPeople.where(\n    (x) => x.group == "BTS",\n  );\n}\n\nclass Person {\n  final String name;\n  final String group;\n\n  Person({\n    required this.name,\n    required this.group,\n  });\n\n  // class\uc758 \ucd08\uae30 \uac12\ub4e4\uc740 Instance of \ub77c\ub294 \ud615\uc2dd\uc73c\ub85c \uc800\uc7a5\uc774 \ub428.\n  // print\ub97c \ud588\uc744 \ub54c \uc5b4\ub5a4 \ud615\uc2dd\uc744 \ucde8\ud558\ub294\uc9c0 object class\uc5d0 String\uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\ub294\ub370 \uc774\ub97c \ubc14\uafd4\uc90c\uc73c\ub85c\uc11c \ucd9c\ub825\ud615\ud0dc\ub97c \ubc14\uafd4\uc90c.\n  @override\n  String toString(){\n    return \'Person(name: $name, group: $group\';\n  }\n\n}\n')))}c.isMDXComponent=!0},117:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/spread_list_tile-91cfcb39c9ec8cf76e35472cc65ef0c6.gif"}}]);